---
description: 
globs: 
alwaysApply: false
---
You are the security specialist tasked with creating a Mermaid diagram to visualise the authentication flow for the login and registration module. The diagram should be created in the following file: DESTINATION

You will need to refer to the following files to understand the existing requirements:

<file_references>
@prd.md
</file_references>
<destination>
.docs/diagrams/auth.md
</destination>

Your task is to analyse the specification of the login and registration module and create a comprehensive Mermaid diagram that accurately depicts the authentication sequence.

Before creating the diagram, analyse the requirements and plan your approach. Place your analysis inside the tags <authentication_analysis>. In this analysis:

1. list all the authentication flows listed in the reference files.
2. Identify the main actors and their interactions.
3. Identify the token verification and refreshment processes.
4. provide a brief description of each authentication step.

When you are ready to create a diagram, follow the guidelines below:

1. start your diagram with the following syntax:

   ``mermaid
 sequenceDiagram
 ``

2. Include the following elements in your diagram:

    - Full lifecycle of the authentication process in a modern application using React, Astro and Supabase Auth
    - Communication between actors: 1) Browser 2) Middleware 3) Astro API 4) Supabase Auth
    - Explicit points where user redirection or token verification occurs
    - Data flow after implementation of new authentication requirements
    - How the user session works after login and how the system reacts to token expiration
    - Token refresh process and protection against unauthorized access.

3 Follow these Mermaid syntax rules:

    - Use the `autonumber` attribute for clarity in step sequences
    - Maintain consistent spacing between elements for diagram readability
    - Always use `participant` to declare actors before starting a sequence
    - Remember the correct order of elements in a sequence (sender, arrow, receiver)
    - Use the correct activation and deactivation cycle for diagram elements
    - Use the correct arrow types:
        - `->` for regular arrows (e.g., `Browser->API`)
    - `-->` for dashed arrows (e.g., `API-->Browser: Token expired`)
    - `->>` for arrows with empty arrowheads (e.g., `Browser->>Auth: Login request`)
    - `-->>` for dashed arrows with empty arrowheads
    - For activation blocks, correctly use `activate` and `deactivate`:
        ```
    activate Browser
    Browser->>API: Request data
    deactivate Browser
    ```
    - Use `alt`/`else`/`end` for conditional paths:
        ```
    alt Authentication successful
    Browser->>Dashboard: Redirect to dashboard
    else Authentication failed
    Browser->>LoginPage: Show error message
    end
    ```
    - For parallel actions, use `par`/`and`/`end``:
        ```
    par Send confirmation email
    API->>EmailService: Send verification
    and Update user status
    API->>Database: Update status
    end
    ```
   - For multi-line notes, use the correct syntax:
     ```
    Note over Browser,API: This text will appear
    in a note covering both
    ``
    - DO NOT exceed 80 characters in a single line of Mermaid code
    - DO NOT include URLs, endpoint addresses, parentheses, long function names, or complex expressions in diagram names:
        WRONG: [Home<br/>(Rule Builder)]
    GOOD: [Rule Builder]
    - Use consistent naming throughout the document

4. Avoid these common mistakes:
  - Missing declaration of Mermaid section and diagram type at the beginning
  - Incorrect syntax of arrows (e.g. -> instead of ->>)
  - Using forbidden characters in identifiers without putting them in quotation marks
  - Unbalanced code blocks (missing end for started blocks)
  - Exceeding line length limits
  - Incorrect nesting of conditional blocks

After creating your diagram, review it carefully to make sure there are no syntax errors or rendering problems. Make the necessary corrections to improve clarity and accuracy.

When you are ready to present the final diagram, use <mermaid_diagram> tags to surround it.
